用koala编译，或者使用sublime需下载 less和less2css插件


变量：
	@box_width:2px;
	
	
混合：
	/*   */
	.border{
		border:2px solid red;
	}
	.box{
		width:@box_width;
		height:@box_height;
		.border;
	}
	
	
	/*   */
	.border_02(@border_width){
		border:solid yellow @border_width;
	}
	.test_hunhe{
		.border_02(30px);
	}
	
	/*    */
	.border_03(@border_width:10px){
		border:solid yellow @border_width;
	}
	.test_hunhe{
		.border_03();//.border_03(30px);
	}
	
	
匹配模式：=>  @_ 表示始终存在
	.triangle(top,@width:5px,@color:#ccc){
		border_width:@width;
		border-color:@color transparent transparent transparent;
		border-style:solid dashed dashed dashed;
	}
	.triangle(right,@width:5px,@color:#ccc){
		border_width:@width;
		border-color:transparent @color transparent transparent;
		border-style:dashed solid dashed dashed;
	}
	.triangle(bottom,@width:5px,@color:#ccc){
		border_width:@width;
		border-color:transparent transparent @color transparent;
		border-style:dashed dashed solid dashed;
	}
	.triangle(left,@width:5px,@color:#ccc){
		border_width:@width;
		border-color:transparent transparent transparent @color;
		border-style:dashed dashed dashed solid;
	}
	.triangle(@_,@width:5px,@color:#ccc){
		width:0px;
		height:0px;
		overflow:hidden;
	}
	.sanjiao{
		.triangle(left,100px);
	}
	
	
运算：+-*/
	@test_01:20px;
	.box_02{
		width:(@test_01+5)*20;
		color:#ccc-10;
	}
	
	
嵌套：1.表示 .list li   2.&表示他的上一层选择器（非css结构，看less里的结构）
	/* 1   */
	.list{
		width:600px;
		margin:0px;
		padding:0px;
		list-style:none;
		
		
		/* 嵌套 相当于 .list li  */
		li{
			height:30px;
			line-height:30px;
			background-color:pink;
			margin-bottom:5px;
		}
		
		a{
			float:left;
		}
		span{
			float:right;
		}
	}
	
	/* 2. &  */
	a{
		float:left;
		&:hover{
			color:red;
		}
		
	}

	
@arguments变量：
	.border_arg(@w:30px,@c:red,@xx:solid){
		border:@arguments;
	}
	.test_arguments(
		.border_arg(40px);
	)


避免编译：
	.test_03{
		//width:calc(300px-30px);//不希望计算
		width:~'calc(300px-30px)';
	}

	
!important 可以给混合模式添加，改变优先级  尽量不用
	.test_important{
		.border_03() !important;//为所有的border_03添加important;
	}

















